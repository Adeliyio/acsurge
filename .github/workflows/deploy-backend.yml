name: Deploy Backend to Datalix VPS

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
      - 'deploy/**'
  pull_request:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - 'deploy/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.11'
  DATALIX_HOST: ${{ secrets.DATALIX_HOST }}
  DATALIX_USER: ${{ secrets.DATALIX_USER }}
  KNOWN_HOSTS: |1|
    BLHzmDQJzBL2nSVtrPFc3UOUtVk=|9s41H8s39BTOAbLgdzwp1c/LOCc= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD369BeRUntYPXp7vLzjzYcxnxe9RFF14vexGIcXbKVRCgWl+eD3w92pntM5Qya5J9pbfC3eVJCHAWrmlvWdFRnG/RZhIH2vNqjiripXFgyETy03MQBuvZSYZs93Xvw9+Cg/Pz6R0hILUF1h29erAXFV6znzz3FvTtA9qjWLHWhOmjIdvwrts9lRKPXTwwDyhakZc0+k2kBDsRAGJ+aPtUCnNosNUj1RB7NZQMDx8RUnXgQjbweIgHCtSc0BTOAeDGocuTj12lHLzR/AG0upcpySaRj14RxGHzNv7lDr8Nu3Up2CquVBACCEfPR+nUyzODZLI+tvxHajaKrNMWFpx9v
    |1|Cey+NbvgAcqcHc0QjntjpwQ9cHs=|bcyVm7vNb0SCwgqDaI1QStbIS3k= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFzLEDoeUsl9zZ7Cr0hSDNH+ioNLHKSXOqqLN/0wirxOFosD7eqX7I5/jRxTBXaanzDkm49fCysuxHC6WeQFXLo=
    |1|r+wMAgCfXgENvcwp7//SKsdjMJM=|7zLD6XfOZpbRpUW5fdKFARbfMrY= ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICg/Dgk8liWDDHyaGWJhGIbw6MHbKSSYziFPy7Nqe7g6

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements-production.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-production.txt
        python -c "import nltk; nltk.download('punkt')"
        python -c "import nltk; nltk.download('stopwords')"

    - name: Run linting
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests
      run: |
        pip install pytest pytest-asyncio httpx
        python -m pytest --tb=short -v || true

    - name: Test application startup
      run: |
        timeout 10s python main_production.py || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
      env:
        DEBUG: true

  deploy-staging:
    name: Deploy to Staging (Datalix VPS)
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.DATALIX_SSH_KEY }}
        known_hosts: ${{ env.KNOWN_HOSTS }}

    - name: Deploy to Datalix VPS (Staging)
      run: |
        ssh -o StrictHostKeyChecking=yes ${{ env.DATALIX_USER }}@${{ env.DATALIX_HOST }} '
          set -e
          echo "üöÄ Starting staging deployment..."
          
          # Create staging directory if it doesn't exist
          sudo mkdir -p /home/deploy/adcopysurge-staging
          sudo chown deploy:deploy /home/deploy/adcopysurge-staging
          
          # Clone or update repository
          if [ ! -d "/home/deploy/adcopysurge-staging/.git" ]; then
            cd /home/deploy
            git clone https://github.com/Adeliyio/acsurge.git adcopysurge-staging
          else
            cd /home/deploy/adcopysurge-staging
            git fetch origin
            git reset --hard origin/develop
          fi
          
          # Update backend dependencies
          cd /home/deploy/adcopysurge-staging/backend
          
          # Create virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            python3.11 -m venv venv
          fi
          
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Copy environment configuration
          if [ ! -f ".env" ] && [ -f "../.env.production.template" ]; then
            cp ../.env.production.template .env
            echo "‚ö†Ô∏è  Please update .env file with your staging configuration"
          fi
          
          # Test application startup
          echo "‚úÖ Testing application startup..."
          timeout 10s python main_launch_ready.py || echo "‚úÖ Startup test completed"
          
          echo "‚úÖ Staging deployment completed!"
        '

  deploy-production:
    name: Deploy to Production (Datalix VPS)
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.DATALIX_SSH_KEY }}
        known_hosts: ${{ env.KNOWN_HOSTS }}

    - name: Deploy to Datalix VPS (Production)
      run: |
        ssh -o StrictHostKeyChecking=yes ${{ env.DATALIX_USER }}@${{ env.DATALIX_HOST }} '
          set -e
          echo "üöÄ Starting production deployment..."
          
          # Backup current deployment
          sudo mkdir -p /var/backups/adcopysurge
          if [ -d "/home/deploy/adcopysurge" ]; then
            echo "üîÑ Creating backup..."
            sudo cp -r /home/deploy/adcopysurge /var/backups/adcopysurge/backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Create production directory if it doesn't exist
          sudo mkdir -p /home/deploy/adcopysurge
          sudo chown deploy:deploy /home/deploy/adcopysurge
          
          # Clone or update repository
          if [ ! -d "/home/deploy/adcopysurge/.git" ]; then
            cd /home/deploy
            git clone https://github.com/Adeliyio/acsurge.git adcopysurge
            cd adcopysurge
          else
            cd /home/deploy/adcopysurge
            git fetch origin
            git reset --hard origin/main
          fi
          
          # Setup backend environment
          cd /home/deploy/adcopysurge/backend
          
          # Create virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            python3.11 -m venv venv
          fi
          
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Copy environment configuration if not exists
          if [ ! -f ".env" ] && [ -f "../.env.production.template" ]; then
            cp ../.env.production.template .env
            echo "‚ö†Ô∏è  Environment file created from template. Please configure manually."
          fi
          
          # Create required runtime directories
          sudo mkdir -p /run/adcopysurge /var/log/adcopysurge
          sudo chown www-data:www-data /run/adcopysurge /var/log/adcopysurge
          
          # Copy and install systemd service
          if [ -f "../deploy/gunicorn.service" ]; then
            sudo cp ../deploy/gunicorn.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable gunicorn.service
          fi
          
          # Copy and install nginx configuration
          if [ -f "../deploy/nginx.conf" ]; then
            sudo cp ../deploy/nginx.conf /etc/nginx/sites-available/adcopysurge
            sudo ln -sf /etc/nginx/sites-available/adcopysurge /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t
          fi
          
          # Start/restart services
          echo "üîÑ Restarting services..."
          sudo systemctl restart gunicorn.service || sudo systemctl start gunicorn.service
          sudo systemctl restart nginx || sudo systemctl start nginx
          
          # Wait for services to start
          sleep 10
          
          # Verify deployment
          if sudo systemctl is-active --quiet gunicorn.service; then
            echo "‚úÖ Gunicorn service is running!"
            sudo systemctl status gunicorn.service --no-pager -l
            
            # Health check
            if curl -f http://localhost/health > /dev/null 2>&1 || curl -f http://127.0.0.1/health > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
            else
              echo "‚ùå Health check failed - checking logs..."
              sudo journalctl -u gunicorn.service -n 20 --no-pager
            fi
          else
            echo "‚ùå Gunicorn service failed to start!"
            sudo journalctl -u gunicorn.service -n 20 --no-pager
            exit 1
          fi
          
          if sudo systemctl is-active --quiet nginx; then
            echo "‚úÖ Nginx service is running!"
          else
            echo "‚ùå Nginx service failed!"
            sudo systemctl status nginx --no-pager
          fi
          
          echo "‚úÖ Production deployment completed!"
        '

    - name: Create GitHub Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: backend-v${{ github.run_number }}
        release_name: Backend Release v${{ github.run_number }}
        body: |
          Backend deployment to Datalix VPS production
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
          
          Deployed to: api.adcopysurge.com
        draft: false
        prerelease: false

    - name: Rollback on failure
      if: failure()
      run: |
        echo "üö® Deployment failed - attempting rollback..."
        ssh -o StrictHostKeyChecking=yes ${{ env.DATALIX_USER }}@${{ env.DATALIX_HOST }} '
          # Attempt to restore from backup if exists
          LATEST_BACKUP=$(sudo ls -t /var/backups/adcopysurge/ 2>/dev/null | head -n 1 || echo "")
          if [ ! -z "$LATEST_BACKUP" ]; then
            echo "üîÑ Restoring from backup: $LATEST_BACKUP"
            sudo cp -r /var/backups/adcopysurge/$LATEST_BACKUP /home/deploy/adcopysurge-rollback
            sudo systemctl restart gunicorn.service
            sudo systemctl status gunicorn.service --no-pager
          else
            echo "‚ö†Ô∏è No backup found - manual intervention required"
            sudo journalctl -u gunicorn.service -n 50 --no-pager
          fi
        '
