name: 🚀 Deploy to Datalix VPS

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'
      - 'docker-compose.yml'
      - 'docker-compose.prod.yml'
  pull_request:
    branches: [main]
    types: [closed]
    
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests and deploy directly'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # ================================
  # 🧪 TESTING & QUALITY CHECKS
  # ================================
  test-frontend:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 Install dependencies
      working-directory: ./frontend
      run: npm ci --legacy-peer-deps
      
    - name: 🏗️ Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        CI: false  # Disable treating warnings as errors
        
    - name: 🧪 Run tests
      working-directory: ./frontend  
      run: npm test -- --coverage --watchAll=false
      
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend

  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: adcopysurge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      working-directory: ./backend
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: 🧪 Run backend tests
      working-directory: ./backend
      run: pytest tests/ -v --cov=app --cov-report=xml
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/adcopysurge_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_github_actions_only
        ENVIRONMENT: testing
        
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend
        flags: backend

  # ================================
  # 🔨 BUILD DOCKER IMAGES
  # ================================
  build-images:
    name: 🔨 Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: always() && (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped') && (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped')
    
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏷️ Extract metadata (frontend)
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏷️ Extract metadata (backend)
      id: meta-backend  
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔨 Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🔨 Build and push backend image  
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Staging deployment removed - deploying directly to production

  # ================================  
  # 🚀 DEPLOY TO PRODUCTION
  # ================================
  # 🚀 DEPLOY TO PRODUCTION VPS (NON-DOCKER)
  # ================================
  deploy-production:
    name: 🚀 Deploy to Production VPS
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment:
      name: production
      url: https://adcopysurge.com
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Datalix VPS
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: 46.247.108.207
        port: 22
        username: root
        key: ${{ secrets.DATALIX_SSH_PRIVATE_KEY }}
        script: |
          set -e
          echo "🚀 Starting production deployment to Datalix VPS..."
          
          # Navigate to application directory
          cd /srv/adcopysurge/app
          
          # Create backup
          echo "💾 Creating backup..."
          tar -czf "backup-$(date +%Y%m%d_%H%M%S).tar.gz" . || true
          
          # Pull latest changes from GitHub
          echo "📥 Pulling latest code from GitHub..."
          git fetch --all
          git checkout main
          git pull origin main
          
          # Install/update backend dependencies
          echo "📦 Installing backend dependencies..."
          cd backend
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
          
          # Run database migrations
          echo "🗄️ Running database migrations..."
          python3 scripts/init_passport_schema.py --environment=production || true
          alembic upgrade head || true
          
          # Install/update frontend dependencies and build
          echo "🏗️ Building frontend..."
          cd ../frontend
          npm install --production
          npm run build
          
          # Restart services (adjust service names as needed)
          echo "🔄 Restarting services..."
          cd ..
          
          # Restart backend service
          systemctl restart adcopysurge-api.service
          systemctl reload nginx
          
          # Health check
          echo "🏥 Running health checks..."
          sleep 10
          
          # Check if services are responding (adjust URLs as needed)
          curl -f http://localhost:8000/api/health || curl -f http://localhost:3000/health || echo "⚠️ Health check endpoints not available"
          
          echo "🎉 Production deployment completed successfully!"
  # 📊 POST-DEPLOYMENT
  # ================================
  notify-deployment:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest  
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: 📢 Notify success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "🎉 Production deployment completed successfully!"
        # Add Slack/Discord webhook notification here if needed
        
    - name: 📢 Notify failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Production deployment failed!"
        # Add failure notification here
        
  # ================================
  # 🧹 CLEANUP
  # ================================  
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: 🧹 Clean up old files
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: 46.247.108.207
        port: 46
        username: root
        key: ${{ secrets.DATALIX_SSH_PRIVATE_KEY }}
        script: |
          echo "🧹 Cleaning up old backup files..."
          cd /srv/adcopysurge
          # Keep only the last 5 backups
          ls -t app-backup-* | tail -n +6 | xargs rm -rf || true
          echo "🧹 Cleanup completed"
