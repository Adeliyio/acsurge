# Multi-stage Dockerfile for AdCopySurge Backend on Render
# Optimized for Python 3.12 with fast rebuilds and minimal size

# Build stage
FROM python:3.12-slim as builder

# Set environment variables for build
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    pkg-config \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Create and use a non-root user
RUN adduser --disabled-password --gecos '' --shell /bin/bash user && \
    chown -R user:user /home/user
USER user
WORKDIR /home/user

# Create virtual environment
RUN python -m venv /home/user/venv
ENV PATH="/home/user/venv/bin:$PATH"

# Upgrade pip and install build tools
RUN pip install --upgrade pip setuptools wheel

# Copy requirements first for better layer caching
COPY --chown=user:user requirements-production.txt ./
COPY --chown=user:user constraints-py312.txt ./

# Install Python dependencies with constraints for Python 3.12 compatibility
RUN pip install -r requirements-production.txt -c constraints-py312.txt --no-cache-dir --prefer-binary

# Production stage
FROM python:3.12-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/home/user/venv/bin:$PATH" \
    PYTHONPATH="/app/backend:/app"

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create user and directories
RUN adduser --disabled-password --gecos '' --shell /bin/bash user && \
    mkdir -p /app && \
    chown -R user:user /app

# Copy virtual environment from builder stage
COPY --from=builder --chown=user:user /home/user/venv /home/user/venv

USER user
WORKDIR /app/backend

# Copy application code
COPY --chown=user:user . .

# Copy build and start scripts
COPY --chown=user:user build.sh start.sh ./
RUN chmod +x build.sh start.sh

# Create necessary directories
RUN mkdir -p logs temp

# Download NLTK data if needed
RUN python -c "import nltk; nltk.download('punkt', quiet=True); nltk.download('stopwords', quiet=True)" 2>/dev/null || echo "NLTK data download skipped"

# Expose port (Render will set PORT environment variable)
EXPOSE $PORT

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8000}/health || exit 1

# Use start script as entrypoint
ENTRYPOINT ["./start.sh"]
